# Auto-generated from 50_assign_population.ipynb
# Do not edit this file directly; edit the notebook instead.

# %%

import pandas as pd
df = pd.read_csv("df_check_9.csv", index_col=0)

# %%

import pandas as pd

data = {'country': ['ケニア', 'ベトナム', 'モンゴル', '中華人民共和国', 'ガーナ', 'ニカラグア', 'カンボジア', 'ネパール', 'タンザニア', 'マリ', 'インドネシア', 'エジプト',
                    'ボスニア・ヘルツェゴビナ', 'インド', 'ザンビア', 'ナイジェリア', 'トンガ', 'パラオ', 'カメルーン', 'グアテマラ', 'サモア', 'モザンビーク',
                    'ボリビア', 'バングラデシュ', 'セネガル', 'ブルキナファソ', 'ウガンダ', 'パラグアイ', 'ホンジュラス', 'パキスタン', 'マレーシア', 'ラオス',
                    'モロッコ', 'アンゴラ', 'イラン', 'カザフスタン', 'モーリシャス', 'ペルー', 'フィリピン', 'スリランカ', 'チュニジア', 'ガボン',
                    '東ティモール', 'ニジェール', 'ベナン', '南アフリカ共和国', 'エリトリア', 'ガンビア', 'キルギス', 'ブータン', 'アフガニスタン', 'ヨルダン',
                    'エチオピア', 'キリバス', 'ツバル', 'マラウイ', 'ルワンダ', 'エルサルバドル', 'タイ', 'エクアドル', 'パプアニューギニア', 'コスタリカ',
                    'アルゼンチン', 'ブラジル', 'チリ', 'パレスチナ', 'サウジアラビア', 'トルコ', 'アゼルバイジャン', 'シエラレオネ', 'ポーランド', 'ソロモン',
                    'セルビア', 'ミクロネシア連邦', 'ウズベキスタン', 'モンテネグロ', 'バヌアツ', 'モルディブ', 'セントビンセント', 'モーリタニア', 'ウクライナ',
                    'モルドバ', 'ジョージア', 'スロバキア', 'マダガスカル', '北マケドニア共和国', 'ギニア', 'セントクリストファー・ネービス', 'ミャンマー',
                    'ドミニカ共和国', 'メキシコ', 'パナマ', 'アルジェリア', 'ブルガリア', 'スリナム', 'カーボベルデ', 'ジブチ', 'セーシェル',
                    'セントルシア', 'タジキスタン', 'アルメニア', 'ルーマニア', 'ジャマイカ', 'ガイアナ', 'レソト', 'ブルンジ', 'マーシャル', 'ドミニカ',
                    'アンティグア・バーブーダ', 'フィジー', 'アルバニア', 'グレナダ', 'レバノン', 'コンゴ民主共和国', 'エスワティニ', 'ナミビア',
                    'バルバドス', 'コロンビア', 'キューバ', 'スーダン', 'ベリーズ', 'ギニアビサウ', 'ハイチ', 'コソボ', 'トーゴ', 'コモロ',
                    'ジンバブエ', 'クロアチア', 'イラク', '南スーダン', 'コートジボワール', 'リベリア',  'ボツワナ'],
        'alpha2': ['KE', 'VN', 'MN', 'CN', 'GH', 'NI', 'KH', 'NP', 'TZ', 'ML', 'ID', 'EG', 'BA', 'IN', 'ZM', 'NG', 'TO', 'PW', 'CM', 'GT',
                   'WS', 'MZ', 'BO', 'BD', 'SN', 'BF', 'UG', 'PY', 'HN', 'PK', 'MY', 'LA', 'MA', 'AO', 'IR', 'KZ', 'MU', 'PE', 'PH',
                   'LK', 'TN', 'GA', 'TL', 'NE', 'BJ', 'ZA', 'ER', 'GM', 'KG', 'BT', 'AF', 'JO', 'ET', 'KI', 'TV', 'MW', 'RW', 'SV',
                   'TH', 'EC', 'PG', 'CR', 'AR', 'BR', 'CL', 'PS', 'SA', 'TR', 'AZ', 'SL', 'PL', 'SB', 'RS', 'FM', 'UZ', 'ME', 'VU',
                   'MV', 'VC', 'MR', 'UA', 'MD', 'GE', 'SK', 'MG', 'MK', 'GN', 'KN', 'MM', 'DO', 'MX', 'PA', 'DZ', 'BG', 'SR', 'CV',
                   'DJ', 'SC', 'LC', 'TJ', 'AM', 'RO', 'JM', 'GY', 'LS', 'BI', 'MH', 'DM', 'AG', 'FJ', 'AL', 'GD', 'LB', 'CD', 'SZ',
                   'NA', 'BB', 'CO', 'CU', 'SD', 'BZ', 'GW', 'HT', 'XK', 'TG', 'KM', 'ZW', 'HR', 'IQ', 'SS', 'CI', 'LR', 'BW'],
        'alpha3': ['KEN', 'VNM', 'MNG', 'CHN', 'GHA', 'NIC', 'KHM', 'NPL', 'TZA', 'MLI', 'IDN', 'EGY', 'BIH', 'IND', 'ZMB', 'NGA',
                   'TON', 'PLW', 'CMR', 'GTM', 'WSM', 'MOZ', 'BOL', 'BGD', 'SEN', 'BFA', 'UGA', 'PRY', 'HND', 'PAK', 'MYS', 'LAO',
                   'MAR', 'AGO', 'IRN', 'KAZ', 'MUS', 'PER', 'PHL', 'LKA', 'TUN', 'GAB', 'TLS', 'NER', 'BEN', 'ZAF', 'ERI', 'GMB',
                   'KGZ', 'BTN', 'AFG', 'JOR', 'ETH', 'KIR', 'TUV', 'MWI', 'RWA', 'SLV', 'THA', 'ECU', 'PNG', 'CRI', 'ARG', 'BRA',
                   'CHL', 'PSE', 'SAU', 'TUR', 'AZE', 'SLE', 'POL', 'SLB', 'SRB', 'FSM', 'UZB', 'MNE', 'VUT', 'MDV', 'VCT', 'MRT',
                   'UKR', 'MDA', 'GEO', 'SVK', 'MDG', 'MKD', 'GIN', 'KNA', 'MMR', 'DOM', 'MEX', 'PAN', 'DZA', 'BGR', 'SUR', 'CPV',
                   'DJI', 'SYC', 'LCA', 'TJK', 'ARM', 'ROU', 'JAM', 'GUY', 'LSO', 'BDI', 'MHL', 'DMA', 'ATG', 'FJI', 'ALB', 'GRD',
                   'LBN', 'COD', 'SWZ', 'NAM', 'BRB', 'COL', 'CUB', 'SDN', 'BLZ', 'GNB', 'HTI', 'XKX', 'TGO', 'COM', 'ZWE', 'HRV',
                   'IRQ', 'SSD', 'CIV', 'LBR', 'BWA']}

df_country = pd.DataFrame(data)
df_country

# %%

df_data = pd.read_csv('input/API_SP.POP.TOTL_DS2_en_csv_v2_2590.csv')
df_data = df_data.rename(columns={'Unnamed: 0': 'country_name_en'})
df_data = df_data.rename(columns={'counjp': 'country'})

df_data

# %%

# 既存の df_data をそのまま使うと仮定
df_long = df_data.melt(
    id_vars=['Country Name', 'Country Code', 'Indicator Name', 'Indicator Code'],
    var_name='Year',
    value_name='Value'
)

# Year を数値に変換したい場合
df_long['Year'] = df_long['Year'].astype(int)

# 列の順番を整える（お好みで）
df_long = df_long.rename(columns={'Value': 'population'})
df_long = df_long[['Country Code', 'Year', 'population']]

# 結果確認
df_long['join_flg'] = True
df_long = df_long.rename(columns={'Country Code': 'alpha3'})
df_long

# %%


df['join_flg'] = (
    (
        (df['project_start_year']!=0) & (df['project_end_year']!=0)
    )
    &(
        (df['project_start_year'].notna()) & (df['project_end_year'].notna())
    )
)

# %%

# dfと結合
df = df.merge(df_long, on=['alpha3','join_flg'], how='left')
df

# %%

# 開始・終了期間のみのレコードを残して平均をとる
# それ以外のレコードを除外する。条件は 1 or 2 or 3
# 1.開始終了がとれなかったもの(join_flg false)
# 2.複数地域のため、開始終了は取れたが、複数地域のため、値が一意にならなかったもの（地域詳細がNULL）
# 3.開始・終了年以内のレコード
cond = (
    (~df['join_flg']) |
    (df['地域詳細'].isna()) |
    (
        (df['project_start_year'] <= df['Year'])&
        (df['Year'] <= df['project_end_year'])
    )
)
df = df[cond]
df

# %%

group_keys = ['file']

# 平均を取りたいカラムをリストで定義
mean_cols = [
    'population',
]

# agg_dict を動的に生成
agg_dict = {
    col: ('mean' if col in mean_cols else 'first')
    for col in df.columns
    if col not in group_keys
}

# groupby + agg
df_grouped = (
    df
    .groupby(group_keys, as_index=False)
    .agg(agg_dict)
)

# （任意）列順を調整
cols_order = group_keys + [c for c in df_grouped.columns if c not in group_keys]
df_grouped = df_grouped[cols_order]

df_grouped

# %%

df_grouped.drop(columns='Year')
df_grouped.to_csv('df_check_10.csv')

# %%


# %%

# 検算
cols = ['alpha3','プロジェクト期間開始_実績','プロジェクト期間終了_実績','population']
df_grouped[df_grouped['file']=='https://www2.jica.go.jp/ja/evaluation/pdf/2015_0602104_4_f.pdf'][cols]

# %%

df_long = df_long[((2007 <= df_long['Year']) & (df_long['Year'] <= 2013) & (df_long['alpha3'] == 'CHN'))]
df_long

# %%

df_long = df_long.groupby('alpha3').agg('mean')
df_long

# %%

