# Auto-generated from 30_assign_cat_dummy.ipynb
# Do not edit this file directly; edit the notebook instead.

# %%

import pandas as pd
df = pd.read_csv('df_check_5.csv', index_col=0)
df.columns

# %%

df[["分野"]]

# %%

cat_dict = {
    "general_development_plan": "開発計画一般",
    "regional_development": "総合地域開発計画",
    "general_administration": "行政一般",
    "finance": "財政・金融",
    "environment": "環境問題",
    "statistics": "統計",
    "information": "情報・広報",
    "public_utilities": "公益事業一般",
    "water_supply": "上水道",
    "sewerage": "下水道",
    "sanitation": "都市衛生",
    "transportation": "運輸交通一般",
    "roads": "道路",
    "land_transport": "陸運",
    "railways": "鉄道",
    "maritime_transport": "海運・船舶",
    "ports": "港湾",
    "aviation": "航空・空港",
    "urban_transport": "都市交通",
    "meteorology": "気象・地震",
    "infrastructure": "社会基盤一般",
    "rivers": "河川・砂防",
    "water_resources": "水資源開発",
    "urban_planning": "都市計画・土地造成",
    "housing": "建築住宅",
    "surveying": "測量・地図",
    "communications": "通信・放送一般",
    "postal": "郵便",
    "telecom": "電気通信",
    "broadcasting": "放送",
    "agriculture": "農業一般",
    "sericulture": "養蚕",
    "agri_engineering": "農業土木",
    "agri_machinery": "農業機械",
    "food_processing_agriculture": "農産加工",
    "food_aid_agriculture": "食糧増産援助",
    "livestock": "畜産",
    "animal_health": "家畜衛生",
    "food_processing_livestock": "畜産加工",
    "forestry": "林業・森林保全",
    "wood_processing": "林業加工",
    "fisheries": "水産",
    "fish_processing": "水産加工",
    "mining": "鉱業",
    "industry": "工業一般",
    "chemical": "化学工業",
    "metals": "鉄鋼・非鉄金属",
    "machinery": "機械工業",
    "textiles": "繊維工業",
    "pulp_wood": "パルプ・木材製品",
    "food_industry": "食品工業",
    "other_industry": "その他工業",
    "energy": "エネルギー一般",
    "electricity": "電力",
    "gas_oil": "ガス・石油",
    "renewable_energy": "新・再生エネルギー",
    "other_energy": "その他エネルギー",
    "business": "商業経営",
    "trade": "貿易",
    "tourism": "観光一般",
    "tourist_facilities": "観光施設",
    "human_resources": "人的資源一般",
    "sports": "体育",
    "education": "教育",
    "basic_education": "基礎教育",
    "secondary_education": "中等教育",
    "higher_education": "高等教育",
    "vocational_training": "職業訓練",
    "science": "科学",
    "culture": "文化",
    "health": "保健・医療",
    "basic_health": "基礎保健",
    "family_planning": "人口・家族計画",
    "welfare": "社会福祉",
    "labor": "労働",
    "disaster_relief": "災害援助",
    "food_aid_general": "食糧援助",
    "other_welfare": "その他福祉",
    "other": "その他",
}

# %%


# prompt: categoryに特定の文字が含む場合true

def check_category(category, keyword):
  """
  Checks if a category string contains a specific keyword.

  Args:
    category: The category string to check.
    keyword: The keyword to search for.

  Returns:
    True if the keyword is found in the category string, False otherwise.
  """
  return keyword in category

# %%

for key in cat_dict.keys():
    col_name = f"{cat_dict[key]}_cat_flg"
    target_value = cat_dict[key]
    # カンマで分割し、前後の空白を除去したリストに target_value が含まれるかチェック
    df[col_name] = df["分野"].apply(
        lambda x: target_value in [item.strip() for item in str(x).split('、')]
    )

# %%

df.columns

# %%

# 0件のカラムを削除
for col in df.columns:
    if 'cat_flg' in col and df[col].sum() == 0:
        df = df.drop(col, axis=1)

# %%

# 分野のものだけtrueになることを確認
col=['分野', '運輸交通一般_cat_flg','人口・家族計画_cat_flg']
df[col].head(1)

# %%

df.to_csv('df_check_6.csv')

# %%

import pandas as pd
import matplotlib.pyplot as plt
import japanize_matplotlib

# cat_flgを含むカラムを抽出
cat_flg_cols = [col for col in df.columns if "cat_flg" in col]

# 各カラムのTrueの数をカウントし、データフレームを作成
true_counts = []
for col in cat_flg_cols:
    true_count = df[col].sum()
    true_counts.append(true_count)

result_df = pd.DataFrame({
    "category": [col.replace("_cat_flg", "") for col in cat_flg_cols],
    "true_count": true_counts
})

# 件数0の行を削除
result_df = result_df[result_df["true_count"] > 0]

# 大きい順にソート
result_df = result_df.sort_values("true_count", ascending=False)

# 棒グラフを描画
plt.figure(figsize=(15, 6))
plt.bar(result_df["category"], result_df["true_count"])
plt.xlabel("カテゴリ")
plt.ylabel("TRUEの数")
plt.title("カテゴリごとのTRUEの数")
plt.xticks(rotation=90)  # x軸ラベルを90度回転
plt.tight_layout()
plt.show()

# %%

# prompt: 円グラフをつくって

import matplotlib.pyplot as plt
# 前のコードで作成されたdfとresult_dfを使用

# 円グラフを作成
plt.figure(figsize=(8, 8))
plt.pie(result_df['true_count'], labels=result_df['category'], autopct='%1.1f%%', startangle=90)
plt.title('分野ごとの件数割合')
plt.axis('equal')  # 円形にする
plt.tight_layout()
plt.show()

# %%

df

# %%


# %%


# %%

